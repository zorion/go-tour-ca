Mètodes i interfícies
Aquesta lliçó cobreix els mètodes i les interfícies, les construccions que defineixen els objectes i el seu comportament.

The Go Authors
https://golang.org

* Mètodes

Go no té classes.
Tot i això, pots definir mètodes sobre tipus.

Un mètode és una funció amb un argument especial _receptor_.

El receptor apareix a la seva pròpia llista d'arguments entre la paraula clau `func` i
el nom del mètode.

En aquest exemple, el mètode `Abs` té un receptor de tipus `Vertex` anomenat `v`.

.play methods/methods.go

* Els mètodes són funcions

Recorda: un mètode és només una funció amb un argument receptor.

Aquí tens `Abs` escrit com una funció regular sense canvis en la funcionalitat.

.play methods/methods-funcs.go

* Mètodes continuació

També pots declarar un mètode sobre tipus que no són estructures.

En aquest exemple veiem un tipus numèric `MyFloat` amb un mètode `Abs`.

Només pots declarar un mètode amb un receptor el tipus del qual estigui definit en el mateix
paquet que el mètode.
No pots declarar un mètode amb un receptor el tipus del qual estigui definit en un altre
paquet (això inclou els tipus integrats com `int`).

.play methods/methods-continued.go

* Receptors de punter

Pots declarar mètodes amb receptors de punter.

Això significa que el tipus receptor té la sintaxi literal `*T` per a algun tipus `T`.
(A més, `T` no pot ser en si mateix un punter com `*int`).

Per exemple, el mètode `Scale` aquí està definit sobre `*Vertex`.

Els mètodes amb receptors de punter poden modificar el valor al qual apunta el receptor
(com fa `Scale` aquí).
Com que els mètodes sovint necessiten modificar el seu receptor, els receptors de punter són més
comuns que els receptors de valor.

Prova d'eliminar el `*` de la declaració de la funció `Scale` a la línia 16
i observa com canvia el comportament del programa.

Amb un receptor de valor, el mètode `Scale` opera sobre una còpia del valor original
`Vertex`.
(Aquest és el mateix comportament que per a qualsevol altre argument de funció.)
El mètode `Scale` ha de tenir un receptor de punter per canviar el valor `Vertex`
declarat a la funció `main`.

.play methods/methods-pointers.go

* Punters i funcions

Aquí veiem els mètodes `Abs` i `Scale` reescrits com a funcions.

De nou, prova d'eliminar el `*` de la línia 16.
Pots veure per què canvia el comportament?
Què més vas haver de canviar perquè l'exemple compilés?

(Si no n'estàs segur, continua a la següent pàgina.)

.play methods/methods-pointers-explained.go

* Mètodes i indirecte de punter

Comparant els dos programes anteriors, potser notes que
les funcions amb un argument de punter han de prendre un punter:

	var v Vertex
	ScaleFunc(v, 5)  // Error de compilació!
	ScaleFunc(&v, 5) // OK

mentre que els mètodes amb receptors de punter prenen tant un valor com un punter com a
receptor quan són cridats:

	var v Vertex
	v.Scale(5)  // OK
	p := &v
	p.Scale(10) // OK

Per a la declaració `v.Scale(5)`, encara que `v` és un valor i no un punter,
el mètode amb el receptor de punter es crida automàticament.
És a dir, per comoditat, Go interpreta la declaració `v.Scale(5)` com
`(&v).Scale(5)` ja que el mètode `Scale` té un receptor de punter.

.play methods/indirection.go

* Mètodes i indirecte de punter (2)

El mateix passa en la direcció inversa.

Les funcions que prenen un argument de valor han de prendre un valor d'aquest tipus específic:

	var v Vertex
	fmt.Println(AbsFunc(v))  // OK
	fmt.Println(AbsFunc(&v)) // Error de compilació!

mentre que els mètodes amb receptors de valor prenen tant un valor com un punter com a
receptor quan són cridats:

	var v Vertex
	fmt.Println(v.Abs()) // OK
	p := &v
	fmt.Println(p.Abs()) // OK

En aquest cas, la crida al mètode `p.Abs()` s'interpreta com `(*p).Abs()`.

.play methods/indirection-values.go

* Triant un receptor de valor o punter

Hi ha dues raons per utilitzar un receptor de punter.

La primera és perquè el mètode pugui modificar el valor al qual apunta el seu receptor.

La segona és per evitar copiar el valor en cada crida al mètode.
Això pot ser més eficient si el receptor és una estructura gran, per exemple.

En aquest exemple, tant `Scale` com `Abs` són amb tipus receptor `*Vertex`,
encara que el mètode `Abs` no necessita modificar el seu receptor.

En general, tots els mètodes d'un tipus donat haurien de tenir receptors de valor o de punter,
però no una barreja d'ambdós.
(Veurem per què en les properes pàgines.)

.play methods/methods-with-pointer-receivers.go

* Interfícies

Un _tipus d'interfície_ es defineix com un conjunt de signatures de mètodes.

Un valor de tipus interfície pot contenir qualsevol valor que implementi aquests mètodes.

*Nota:* Hi ha un error en el codi d'exemple a la línia 22.
`Vertex` (el tipus valor) no implementa `Abser` perquè
el mètode `Abs` està definit només sobre `*Vertex` (el tipus punter).

.play methods/interfaces.go

* Les interfícies s'implementen implícitament

Un tipus implementa una interfície implementant els seus mètodes.
No hi ha cap declaració explícita d'intenció, cap paraula clau "implements".

Les interfícies implícites desacoblen la definició d'una interfície de la seva
implementació, que pot aparèixer en qualsevol paquet sense acord previ.

.play methods/interfaces-are-satisfied-implicitly.go

* Valors d'interfície

Sota el capó, els valors d'interfície es poden pensar com una tupla d'un valor i un
tipus concret:

	(valor, tipus)

Un valor d'interfície conté un valor d'un tipus concret subjacent específic.

Cridar un mètode sobre un valor d'interfície executa el mètode del mateix nom sobre
el seu tipus subjacent.

.play methods/interface-values.go

* Valors d'interfície amb valors subjacents nuls

Si el valor concret dins de la interfície mateixa és nul,
el mètode es cridarà amb un receptor nul.

En alguns llenguatges això provocaria una excepció de punter nul,
però en Go és comú escriure mètodes que manegen elegantment ser cridats
amb un receptor nul (com amb el mètode `M` en aquest exemple.)

Tingues en compte que un valor d'interfície que conté un valor concret nul no és en si mateix nul.

.play methods/interface-values-with-nil.go

* Valors d'interfície nuls

Un valor d'interfície nul no conté ni valor ni tipus concret.

Cridar un mètode sobre una interfície nul·la és un error en temps d'execució perquè no hi ha
tipus dins de la tupla d'interfície per indicar quin mètode _concret_ cridar.

.play methods/nil-interface-values.go

* La interfície buida

El tipus d'interfície que no especifica cap mètode s'anomena interfície _buida_:

	interface{}

Una interfície buida pot contenir valors de qualsevol tipus.
(Cada tipus implementa almenys zero mètodes.)

Les interfícies buides s'utilitzen per gestionar valors de tipus desconegut.
Per exemple, `fmt.Print` pren qualsevol nombre d'arguments de tipus `interface{}`.

.play methods/empty-interface.go

* Conversió de tipus amb afirmació de tipus

Una _afirmació de tipus_ proporciona accés al valor concret subjacent d'un valor d'interfície.

	t := i.(T)

Aquesta declaració afirma que el valor d'interfície `i` conté el tipus concret `T`
i assigna el valor subjacent `T` a la variable `t`.

Si `i` no conté un `T`, la declaració provocarà un error en temps d'execució.

Per _provar_ si un valor d'interfície conté un tipus específic,
una afirmació de tipus pot retornar dos valors: el valor subjacent
i un valor booleà que indica si l'afirmació ha tingut èxit.

	t, ok := i.(T)

Si `i` conté un `T`, llavors `t` serà el valor subjacent i `ok` serà cert.

Si no, `ok` serà fals i `t` serà el valor zero del tipus `T`,
i no es produirà cap error.

Observa la similitud entre aquesta sintaxi i la de llegir d'un mapa.

.play methods/type-assertions.go

* Commutadors de tipus (switch)

Un _commutador de tipus_ és una construcció que permet diverses afirmacions de tipus en sèrie.

Un commutador de tipus s'assembla a un commutador regular, però els casos en un commutador de tipus
especifiquen tipus (no valors), i aquests tipus es comparen amb el tipus
del valor concret que conté el valor d'interfície.

	switch v := i.(type) {
	case T:
		// aquí v és de tipus T
	case S:
		// aquí v és de tipus S
	default:
		// no és cap tipus T ni S
	}

La declaració en un commutador de tipus té la mateixa sintaxi que una afirmació de tipus `i.(T)`,
però el tipus específic `T` es reemplaça per la paraula clau `type`.

Aquest commutador avalua si el valor d'interfície `i`
conté un valor de tipus `T` o `S`.
En cada cas de `T` o `S`, la variable `v` tindrà el tipus
`T` o `S` respectivament i contindrà el valor que conté `i`.
En el cas per defecte (quan no hi ha coincidència), la variable `v` és
del mateix tipus d'interfície i valor que `i`.

.play methods/type-switches.go

* Stringer

Un dels tipus d'interfície més ubics és [[https://golang.org/pkg/fmt/#Stringer][`Stringer`]] definit pel [[https://golang.org/pkg/fmt/][paquet `fmt`]]:

	type Stringer interface {
		String() string
	}

Un `Stringer` és un tipus que pot descriure's a si mateix com a cadena de text.
El paquet `fmt` (i molts altres) busquen aquesta interfície per imprimir valors.

.play methods/stringer.go

* Exercici: Stringer

Fes que el tipus `IPAddr` implementi `fmt.Stringer` per imprimir l'adreça com
una quad-dotted IP.

Per exemple, `IPAddr{1,`2,`3,`4}` hauria d'imprimir com `"1.2.3.4"`.

.play methods/exercise-stringer.go

* Errors

Els programes Go expressen l'estat d'error amb valors `error`.

El tipus `error` és una interfície integrada similar a `fmt.Stringer`:

	type error interface {
		Error() string
	}

(Com amb `fmt.Stringer`, el paquet `fmt` busca la interfície `error` quan
imprimeix valors.)

Les funcions sovint retornen un valor `error` i el codi que crida hauria de gestionar els errors
comprovant si l'error és igual a `nil`.

	i, err := strconv.Atoi("42")
	if err != nil {
		fmt.Printf("no s'ha pogut convertir el número: %v\n", err)
		return
	}
	fmt.Println("Número convertit:", i)

Un `nil` `error` denota èxit; un `error` no nul denota fracàs.

.play methods/errors.go

* Exercici: Errors

Copia la teva funció `Sqrt` de l'exercici anterior i modifica-la per retornar un valor `error`.

`Sqrt` hauria de retornar un error no nul quan se li dóna un número negatiu, ja que no suporta nombres complexos.

Crea un nou tipus

	type ErrNegativeSqrt float64

i fes que implementi `error` donant-li un mètode

	func (e ErrNegativeSqrt) Error() string

de manera que `ErrNegativeSqrt(-2).Error()` retorni `"no`es`pot`calcular`l'arrel`quadrada`d'un`número`negatiu:`-2"`.

*Nota:* Una crida a `fmt.Sprint(e)` dins del mètode `Error` provocarà un bucle infinit. Pots evitar-ho convertint primer `e`: `fmt.Sprint(float64(e))`. Per què?

Canvia la teva funció `Sqrt` per retornar un valor `ErrNegativeSqrt` quan se li dóna un número negatiu.

.play methods/exercise-errors.go

* Lectors

El paquet `io` especifica la interfície `io.Reader`,
que representa el final de lectura d'un flux de dades.

La biblioteca estàndard de Go conté [[https://golang.org/search?q=Read#Global][moltes implementacions]] d'aquesta interfície, incloent fitxers,
connexions de xarxa, compressors, xifrats, i altres.

La interfície `io.Reader` té un mètode `Read`:

	func (T) Read(b []byte) (n int, err error)

`Read` omple la porció de bytes donada amb dades i retorna el nombre de bytes
omplerts i un valor d'error. Retorna un error `io.EOF` quan el flux
s'acaba.

El codi d'exemple crea un
[[https://golang.org/pkg/strings/#Reader][`strings.Reader`]]
i consumeix la seva sortida 8 bytes a la vegada.

.play methods/reader.go

* Exercici: Lectors

Implementa un tipus `Reader` que emeti un flux infinit del caràcter ASCII
`'A'`.

.play methods/exercise-reader.go

* Exercici: rot13Reader

Un patró comú és un [[https://golang.org/pkg/io/#Reader][io.Reader]] que embolcalla un altre `io.Reader`, modificant el flux de dades d'alguna manera.

Per exemple, la funció [[https://golang.org/pkg/compress/gzip/#NewReader][`gzip.NewReader`]]
pren un `io.Reader` (un flux de dades comprimides) i retorna un `*gzip.Reader`
que també implementa `io.Reader` (un flux de dades descomprimides).

Implementa un `rot13Reader` que implementi `io.Reader` i llegeixi
d'un `io.Reader`, aplicant la transformació [[https://en.wikipedia.org/wiki/ROT13][rot13]]
a tot el flux.

El tipus `rot13Reader` t'és proporcionat. Fes que sigui un
`io.Reader` implementant el mètode `Read`.

.play methods/exercise-rot-reader.go

* Imatges

El [[https://golang.org/pkg/image/#Image][paquet image]] defineix la interfície `Image`:

	package image

	type Image interface {
		ColorModel() color.Model
		Bounds() Rectangle
		At(x, y int) color.Color
	}

*Nota:* El valor de retorn `Rectangle` del mètode `Bounds` és en realitat un [[https://golang.org/pkg/image/#Rectangle][`image.Rectangle`]], ja que la declaració és dins del paquet `image`.

(Mira la [[https://golang.org/pkg/image/#Image][documentació]] per més detalls.)

Els tipus `color.Color` i `color.Model` també són interfícies, però usualment
utilitzarem les implementacions predefinides `color.RGBA` i `color.RGBAModel`.
Aquestes interfícies i tipus són especificats pel [[https://golang.org/pkg/image/color/][paquet image/color]].

.play methods/images.go

* Exercici: Imatges

Recordes el [[/moretypes/18][generador d'imatges]] que vas escriure abans? Anem a escriure'n un altre, però
aquesta vegada retornarà una implementació de `Image` en lloc d'una porció de dades.

Defineix el teu propi tipus `Image`, implementa [[https://golang.org/pkg/image/#Image][els mètodes necessaris]], i crida `pic.ShowImage`.

La funció `Bounds` hauria de retornar un `image.Rectangle`, com `image.Rect(0,`0,`w,`h)`.

`ColorModel` hauria de retornar `color.RGBAModel`.

`At` hauria de retornar un color; el valor `v` de l'últim generador d'imatges correspon a `color.RGBA{v,`v,`255,`255}` en aquest.

.play methods/exercise-images.go

* Felicitats!

Has acabat aquesta lliçó!

Pots tornar a la llista de [[/list][mòduls]] per trobar què aprendre a continuació, o continuar amb la [[javascript:click('.next-page')][següent lliçó]].