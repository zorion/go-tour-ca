Paquets, variables i funcions
Aprèn els components bàsics de qualsevol programa de Go.

The Go Authors
https://golang.org

* Paquets

Tot programa de Go està format per paquets.

Els programes comencen executant un paquet anomenat `main`.

Aquest programa fa servir els paquets amb ruta d'importació `"fmt"` i `"math/rand"`.

Per convenció, el nom del paquet és el mateix que l'últim element de la ruta d'importació. Per exemple, el paquet `"math/rand"` comprèn els fitxers que comencen amb la instrucció `package rand`.

#appengine: *Nota:* L'entorn en què aquests programes són executats és
#appengine: determinista, així que cada cop que executeu el programa d'exemple,
#appengine: `rand.Intn` tornarà el mateix nombre.
#appengine:
#appengine: (Si voleu rebre un nombre diferent, haureu de canviar la llavor del generador de nombres; vegeu [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]]. 
#appengine: El temps (Time) és constant al playground, així que haureu de fer servir alguna altra cosa com a llavor.)

.play basics/packages.go

* Importació de paquets

Aquest codi agrupa la importació de paquets en una instrucció entre parèntesis, "factoritzada".

També pots escriure múltiples instruccions d'importació de paquets, com:

	import "fmt"
	import "math"

Però fer servir la versió factoritzada de la instrucció `import` és un bon estil.

.play basics/imports.go

* Noms exportats

A Go, un nom s'exporta si comença per majúscula.
Per exemple, `Pizza` és un nom exportat, com ho és `Pi`, que es pot exportar
del paquet `math`.

`pizza` i `pi` no comencen per majúscula, així que no s'exporten.

Quan has importat un paquet pots referir-te als noms que aquest exporta.
Qualsevol nom que no s'exporti no és accessible des de fora del paquet.

Executa el codi. Fixa't en el missatge d'error.

Per arreglar l'error, canvia el nom `math.pi` per `math.Pi` i torna a provar-ho.

.play basics/exported-names.go

* Funcions

Una funció pot prendre zero o més arguments.

En aquest exemple, `add` pren dos paràmetres del tipus `int`.

Nota que el tipus s'escriu _després_ del nom de la variable.

(Per saber més sobre el motiu pel qual els tipus es fan servir com ho fan, llegiu l'article [[https://blog.golang.org/gos-declaration-syntax]["Go's declaration syntax"]].)	


.play basics/functions.go

* Funcions (continuació)

Quan dos o més paràmetres amb nom consecutius d'una funció comparteixen el tipus pots ometre'l per tots ells excepte l'últim.

En aquest exemple hem escurçat

	x int, y int

deixant-ho

	x, y int

.play basics/functions-continued.go

* Múltiples resultats

Una funció pot tornar més d'un resultat.

La funció `swap` torna dues `string` (cadenes de caràcters).

.play basics/multiple-results.go

* Resultats amb nom

Els valors retornats per una funció de Go poden tenir nom. Si en tenen, els noms es tracten com a variables definides al principi de la funció.

Aquests noms s'haurien d'utilitzar per documentar el significat dels valors retornats.

La instrucció `return` sense arguments retorna els valors continguts a les variables dels noms específicats. Això es coneix en anglès com a "naked" return.

Les instruccions naked return s'haurien de fer servir només en funcions que siguin prou curtes, com a l'exemple següent. Fer-los servir en funcions més llargues pot dificultar la seva llegibilitat.

.play basics/named-results.go

* Variables

La instrucció `var` declara una llista de variables. Com a la llista d'arguments d'una funció, el tipus va al final.

Una instrucció `var` pot estar a nivell de funció o de paquet. Veurem les dues opcions a l'exemple.

.play basics/variables.go

* Variables amb valor inicial

Una declaració `var` pot incloure valors inicials, un per cada variable.

Si un valor inicial és present el tipus es pot ometre, la variable prendrà el tipus del valor inicial.

.play basics/variables-with-initializers.go

* Declaració curta de variables

En una funció, l'operand `:=` (instrucció d'assignació curta) es pot fer servir enlloc de la declaració `var`. El tipus de la variable va implícit.

Fora d'una funció cada instrucció comença amb una paraula clau i l'operand `:=` no està disponible.

.play basics/short-variable-declarations.go

* Tipus bàsics

Els tipus bàsics de Go són

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // àlies per uint8

	rune // àlies per int32
	     // representa un punt de codi Unicode

	float32 float64

	complex64 complex128

L'exemple mostra variables de diversos tipus
i també que la declaració de variables que es pot "factoritzar" en blocs,
com amb les instruccions d'importar paquets.

Els tipus `int`, `uint` i `uintptr` normalment són de 32 bits als sistemes de 32-bit i de 64 bits als sistemes de 64-bit.
Quan necessitis un valor enter hauries de fer servir `int` a no ser que tinguis un motiu específic per a fer servir un tipus d'enter amb tipus o mida.

.play basics/basic-types.go

* Valors zero

Les variables declarades sense un valor inicial explícit reben
el seu _valor zero_.

El valor zero és:

- `0` per als tipus numèrics,
- `false` per al tipus booleà, i
- `""` (la cadena buida) per a les strings (cadenes de text).

.play basics/zero.go

* Conversions de tipus

L'expressió `T(v)` converteix el valor `v` al tipus `T`.

Algunes conversions numèriques:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

O, de manera més senzilla:

	i := 42
	f := float64(i)
	u := uint(f)

A diferència de C, en Go l'assignació entre elements de diferents tipus requereix
conversió explícita.
Prova de treure les conversions `float64` o `uint` de l'exemple i mira què passa.

.play basics/type-conversions.go

* Inferència de tipus

En declarar una variable sense especificar un tipus explícit (ja sigui utilitzant la sintaxi `:=` o la sintaxi `var = `),
el tipus de la variable s'infereix del valor del costat dret.

Quan el costat dret de la declaració té un tipus, la nova variable té el mateix tipus:

	var i int
	j := i // j és un int

Però quan el costat dret conté una constant numèrica no tipada, la nova variable pot ser `int`,
`float64`, o `complex128` depenent de la precisió de la constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Prova de canviar el valor inicial de `v` al codi d'exemple i observa com afecta el seu tipus.

.play basics/type-inference.go

* Constants

Les constants es declaren com les variables però amb la paraula clau `const`.

Una constant pot ser un caràcter, una cadena de text, un booleà o un valor numèric.

Les constants no es poden declarar fent servir l'expressió `:=`.

.play basics/constants.go

* Constants Numèriques

Les constants numèriques són _valors_ d'alta precisió.

Una constant sense tipus definit pren el tipus del seu context.

Prova d'imprimir `needInt(Big)` també.

(Un `int` pot emmagatzemar com a màxim un enter de 64 bits, en ocasions menys.)

.play basics/numeric-constants.go

* Enhorabona!

Has acabat aquesta lliçó!

Pots tornar al llistat de [[/list][mòduls]] per veure què més pots aprendre, o continuar amb la [[javascript:click('.next-page')][següent lliçó]].
