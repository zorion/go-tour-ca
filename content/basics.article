Paquets, variables i funcions.
Aprèn els components bàsics de qualsevol program de Go.

The Go Authors
https://golang.org

* Paquets

Tot programa de Go està format per paquets.

Els programes comencen executant un paquet anomenat `main`.

Aquest programa fa servir els paquets amb ruta d'importació `"fmt"` i `"math/rand"`.


Per convenció, el nom del paquet és el mateix que l'últim element de la ruta d'importació. Per exemple, el paquet `"math/rand"` comprenen els fitxers que comencen amb la instrucció `package`rand`.

#appengine: *Noteu:* L'entorn en que aquests programes són executats és
#appengine: determinístic, així que, cada cop que executeu el programa d'exemple,
#appengine: `rand.Intn` tornarà el mateix nombre.
#appengine:
#appengine: (Si voleu rebre un nombre diferent, haureu de canviar la llavor del generador de nombres; vegeu [[https://golang.org/pkg/math/rand/#Seed][`rand.Seed`]].
#appengine: El temps (Time) és constant al playground, així que haureu de fer servir alguna altra cosa com a llavor.)

.play basics/packages.go

* Important paquets

Aquest codi agrupa la importació de paquets en una instrucció entre parèntesis, "factoritzada".

També pots escriure múltiples instruccions important paquets, com:

	import "fmt"
	import "math"

Però fer servir la versió factoritzada de la instrucció `import` és un estil bo.

.play basics/imports.go

* Noms exportats

A Go, un nom s'exporta si comença per majúscula.
Per exemple, `Pizza` és un nom exportat, com ho és `Pi`, que es pot exportar
del paquet `math`.

`pizza` i `pi` no comencen per majúscula, així que no s'exporten.


Quan has importat un paquet pots referir-te als noms que aquest exporta.
Qualsevol nom que no s'exporti no són accessibles des de fora del paquet.

Executa el codi. Fixa't en el missatge d'error.

Per arreglar l'error, canvia el nom `math.pi` per `math.Pi` i torna a provar-ho.

.play basics/exported-names.go

* Funcions

Una funció pot prendre zero o més arguments.

En aquest exemple, `add` pren dos paràmetres del tipus `int`.

Nota que el tipus s'escriu _després_ del nom de la variable.

(Per saber més sobre el motiu de pel qual els tipus es fan servir com ho fan, llegiu l'article [[https://blog.golang.org/gos-declaration-syntax]["Go's declaration syntax"]].)	


.play basics/functions.go

* Funcions (continuació)

Quan dos o més paràmetres amb nom consecutius d'una funció comparteixen el tipus pots ometre'l per tots ells excepte l'últim.

En aquest exemple hem escurçat

	x int, y int

deixant-ho

	x, y int

.play basics/functions-continued.go

* Múltiples resultats

Una funció por tornar més d'un resultat.

La funció `swap` torna dues `string` (cadenes de caràcters).

.play basics/multiple-results.go

* Resultats amb nom

Els valor retornats per una funció de Go poden tenir nom. Si en tenen, els noms es tracten com a variables definides al principi de la funció.

Aquests noms s'haurien d'utilitzar per documentar el significat dels valors retornats.

La instrucció `return` sense arguments retorna els valors continguts a les variables dels noms específicats.statement without arguments returns the named return values. This is known as a "naked" return.

Naked return statements should be used only in short functions, as with the example shown here. They can harm readability in longer functions.

.play basics/named-results.go

* Variables

The `var` statement declares a list of variables; as in function argument lists, the type is last.

A `var` statement can be at package or function level. We see both in this example.

.play basics/variables.go

* Variables with initializers

A var declaration can include initializers, one per variable.

If an initializer is present, the type can be omitted; the variable will take the type of the initializer.

.play basics/variables-with-initializers.go

* Short variable declarations

Inside a function, the `:=` short assignment statement can be used in place of a `var` declaration with implicit type.

Outside a function, every statement begins with a keyword (`var`, `func`, and so on) and so the `:=` construct is not available.

.play basics/short-variable-declarations.go

* Basic types

Go's basic types are

	bool

	string

	int  int8  int16  int32  int64
	uint uint8 uint16 uint32 uint64 uintptr

	byte // alias for uint8

	rune // alias for int32
	     // represents a Unicode code point

	float32 float64

	complex64 complex128

The example shows variables of several types,
and also that variable declarations may be "factored" into blocks,
as with import statements.

The `int`, `uint`, and `uintptr` types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems.
When you need an integer value you should use `int` unless you have a specific reason to use a sized or unsigned integer type.

.play basics/basic-types.go

* Zero values

Variables declared without an explicit initial value are given their
_zero_value_.

The zero value is:

- `0` for numeric types,
- `false` for the boolean type, and
- `""` (the empty string) for strings.

.play basics/zero.go

* Type conversions

The expression `T(v)` converts the value `v` to the type `T`.

Some numeric conversions:

	var i int = 42
	var f float64 = float64(i)
	var u uint = uint(f)

Or, put more simply:

	i := 42
	f := float64(i)
	u := uint(f)

Unlike in C, in Go assignment between items of different type requires an
explicit conversion.
Try removing the `float64` or `uint` conversions in the example and see what happens.

.play basics/type-conversions.go

* Type inference

When declaring a variable without specifying an explicit type (either by using the `:=` syntax or `var`=` expression syntax), the variable's type is inferred from the value on the right hand side.

When the right hand side of the declaration is typed, the new variable is of that same type:

	var i int
	j := i // j is an int

But when the right hand side contains an untyped numeric constant, the new variable may be an `int`, `float64`, or `complex128` depending on the precision of the constant:

	i := 42           // int
	f := 3.142        // float64
	g := 0.867 + 0.5i // complex128

Try changing the initial value of `v` in the example code and observe how its type is affected.

.play basics/type-inference.go

* Constants

Constants are declared like variables, but with the `const` keyword.

Constants can be character, string, boolean, or numeric values.

Constants cannot be declared using the `:=` syntax.

.play basics/constants.go

* Numeric Constants

Numeric constants are high-precision _values_.

An untyped constant takes the type needed by its context.

Try printing `needInt(Big)` too.

(An `int` can store at maximum a 64-bit integer, and sometimes less.)

.play basics/numeric-constants.go

* Congratulations!

You finished this lesson!

You can go back to the list of [[/list][modules]] to find what to learn next, or continue with the [[javascript:click('.next-page')][next lesson]].
