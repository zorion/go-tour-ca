Més tipus: estructures, slices i maps.
Aprèn com definir tipus basats en altres que ja existeixen: aquesta lliçò explica structs, arrays, slices i maps.

The Go Authors
https://golang.org

* Punters

Go té punters (o apuntadors).
Un punter conté l'adreça de memòria d'un valor.

El tipus `*T` és un punter a un valor `T`. El seu valor zero és `nil`.

	var p *int

L'operador `&` genera un punter al seu operand.

	i := 42
	p = &i

L'operador `*` denota el valor contingut del punter.

	fmt.Println(*p) // llegeix i a través del punter p
	*p = 21         // estableix i a través del punter p

Això es coneix com a "dereferenciació" o "indirecció".

A diferència de C, Go no permet l'aritmètica de punters.

.play moretypes/pointers.go

* Estructures

Una `struct` és una estructura d'un conjunt de camps de dades.

.play moretypes/structs.go

* Camps d'una estructura

Els camps d'una `struct` s'accedeixen mitjançant un punt.

.play moretypes/struct-fields.go

* Punters a estructures

Es pot accedir als camps d'una `struct` mitjançant un punter.

Per accedir al camp `X` d'una estructura tenint el punter a l'estructura `p`
podríem escriure `(*p).X`.
De tota manera aquesta notació és feixuga de manera que el llenguatge ens permet
escriure simplement `p.X`, sense cap indirecció explícita.

.play moretypes/struct-pointers.go

* Literals d'estructures

Un literal d'estructura denota una nova instància d'una estructura creada llistant els valors dels seus camps.

Pots llistar només els valors d'un subconjunt de camps utilitzant la sintaxis `Nom:` (l'ordre dels camps és irrellevant).

El prefix especial `&` crea un punter a l'espai reservat per la nova estructura.

_(NdT:_ _Un_literal_és_un_valor_fixat_al_codi_font_d'un_programa)_

.play moretypes/struct-literals.go

* Arrays

El tipus `[n]T` és un array de `n` valors del tipus `T`.

L'expressió

	var a [10]int

declara una variable `a` com un array de deu enters.

La longitud d'un array és part del seu tipus, de manera que els arrays no es poden redimensionar.
Això sembla limitant, però no us preocupeu;
Go proporciona una manera convenient de treballar amb arrays.

.play moretypes/array.go


* Slices (llesques)

Un array té una mida fixa.
Una slice (llesca), en canvi, és una vista dinàmicament dimensionada i flexible dels elements d'un array.
En la pràctica, els talls són molt més comuns que els arrays.

El tipus `[]T` és una slice amb elements del tipus `T`.

Un tall es forma especificant dos índexs, una límit inferior i una límit superior, separats per dos punts:

	a[low : high]

Això selecciona un rang semi-obert que inclou el primer element, però n'exclou l'últim.

L'expressió següent crea una slice que inclou els
elements 1 a 3 d' `a`:

	a[1:4]

.play moretypes/slices.go


* Les slices són com referències a arrays

Les llesques no emmagatzemen dades,
només descriuen una secció d'un array subjacent.

El canvi dels elements d'una slice modifica els
elements corresponents del seu array subjacent.

Altres slices que comparteixen el mateix array
subjacent veuran aquests canvis.

.play moretypes/slices-pointers.go


* Literals de Slice

Els literals de slices són com els literals d'arrays, però sense la longitud.

Per especificar una capacitat, passi un tercer argument a make.

Això és un literal d'array:

	[3]bool{true, true, false}

I això crea el mateix array que abans,
i després construeix una "slice" que el referència:

	[]bool{true, true, false}

.play moretypes/slice-literals.go


* Valors per defecte en Slices

Quan es talla una "slice", es poden ometre els límits alt o baix per utilitzar els seus valors per defecte

El valor per defecte és zero per al límit inferior i la longitud de la "slice" per al límit superior.

Per a l'array

	var a [10]int

aquestes slices són equivalents:

	a[0:10]
	a[:10]
	a[0:]
	a[:]

.play moretypes/slice-bounds.go


* Longitud i capacitat d'una Slice

Una slice té tant una _longitud_ com una _capacitat_.

La longitud és el nombre d'elements que conté.

La capacitat és el nombre d'elements de l'array subjacent,
comptant des del primer element de la "slice".


La longitud i la capacitat d'una slice `s` s'obtenen utilitzant les expressions
`len(s)` and `cap(s)`.

Pots augmentar la longitud d'una slice (llesca) tornant-la a tallar,
sempre que tingui capacitat suficient.
Prova de canviar una de les operacions de tall de l'exemple del programa
per allargar-lo més enllà de la seva capacitat i mira què passa.

.play moretypes/slice-len-cap.go


* Slices nil (llesques nul·les)

El valor zero d'una llesca és `nil`.

Una llesca nul·la té una longitud i capacitat de 0
i no té cap array subjacent.

.play moretypes/nil-slices.go


* Creant slices amb make

Les slices es poden crear amb la funció integrada `make`,
així és com es creen arrays de mida dinàmica.

La funció `make` reserva un array amb valors inicials a zero
i retorna un slice que fa referència a aquest array:

	a := make([]int, 5)  // len(a)=5

Per especificar una capacitat, passa un tercer argument a `make`:

	b := make([]int, 0, 5) // len(b)=0, cap(b)=5

	b = b[:cap(b)] // len(b)=5, cap(b)=5
	b = b[1:]      // len(b)=4, cap(b)=4

.play moretypes/making-slices.go


* Slices de slices

Les slices poden contenir qualsevol tipus de dades, incloent altres slices.

.play moretypes/slices-of-slice.go


* Afegir elements a una slice

És habitual afegir nous elements a una slice, per la qual cosa Go proporciona
una funció integrada `append`. La [[https://golang.org/pkg/builtin/#append][documentació]] 
del paquet integrat descriu `append`.

	func append(s []T, vs ...T) []T

El primer paràmetre `s` d' `append` és una slice del tipus `T`, i la resta són valors
tipus `T` que s'han d'afegir a la slice.

El valor resultant d' `append` és una slice que conté tots els elements
de la slice original més els valors proporcionats.

Si l'array de suport de `s` és massa petit per contenir tots els valors donats,
es reservarà un array més gran.
La slice retornada farà referència al nou array reservat.

(Per aprendre més sobre les slices, llegeix l'article
[[https://blog.golang.org/go-slices-usage-and-internals][Slices: usage and internals]].)

.play moretypes/append.go


* Range

La forma `range` del bucle `for` itera sobre una slice o map.

Quan s'itera sobre una slice, es retornen dos valors per cada iteració.
El primer és l'índex, i el segon és una còpia de l'element en aquest índex.

.play moretypes/range.go

* Range (continuació)

Pots ometre l'índex o el valor assignant-lo a `_`.

    for i, _ := range pow
    for _, value := range pow

Si només vols l'índex, pots ometre la segona variable.

    for i := range pow

.play moretypes/range-continued.go

* Exercici: Slices

Implementa `Pic`. Ha de retornar una slice de longitud `dy`, cada element de la qual és una slice de `dx` enters sense signe de 8 bits. Quan executis el programa, mostrarà la teva imatge, interpretant els enters com a valors d'escala de grisos (bé, escala de blaus).

L'elecció de la imatge és cosa teva. Algunes funcions interessants són `(x+y)/2`, `x*y`, i `x^y`.

(Necessitaràs utilitzar un bucle per assignar cada `[]uint8` dins del `[][]uint8`.)

(Utilitza `uint8(intValue)` per convertir entre tipus.)

.play moretypes/exercise-slices.go

* Maps

Un map associa claus a valors.

El valor zero d'un map és `nil`.
Un map `nil` no té claus, ni se li'n poden afegir.

La funció `make` retorna un map del tipus donat,
inicialitzat i llest per utilitzar.

.play moretypes/maps.go

* Literals de Map

Els literals de map són com els literals d'estructura, però les claus són obligatòries.

.play moretypes/map-literals.go

* Literals de Map (continuació)

Si el tipus de nivell superior és només un nom de tipus, pots ometre'l dels elements del literal.

.play moretypes/map-literals-continued.go

* Mutant Maps

Inserir o actualitzar un element en un map `m`:

	m[key] = elem

Recuperar un element:

	elem = m[key]

Eliminar un element:

	delete(m, key)

Comprovar si una clau és present amb una assignació de dos valors:

	elem, ok = m[key]

Si `key` és al map `m`, `ok` és `true`. Si no, `ok` és `false`.

Si `key` no és al map, llavors `elem` és el valor zero per al tipus d'element del map.

*Nota:* Si `elem` o `ok` encara no s'han declarat, pots utilitzar la forma de declaració curta:

	elem, ok := m[key]

.play moretypes/mutating-maps.go

* Exercici: Maps

Implementa `WordCount`. Ha de retornar un map amb el recompte de cada "paraula" a la cadena `s`. La funció `wc.Test` executa un conjunt de proves contra la funció proporcionada i imprimeix èxit o fracàs.

Pot ser útil [[https://golang.org/pkg/strings/#Fields][strings.Fields]].

.play moretypes/exercise-maps.go

* Valors de funció

Les funcions també són valors. Es poden passar com qualsevol altre valor.

Els valors de funció es poden utilitzar com a arguments de funció i valors de retorn.

.play moretypes/function-values.go

* Tancaments de funció

Les funcions de Go poden ser tancaments. Un tancament és un valor de funció que fa referència a variables fora del seu cos. La funció pot accedir i assignar a les variables referenciades; en aquest sentit, la funció està "lligada" a les variables.

Per exemple, la funció `adder` retorna un tancament. Cada tancament està lligat a la seva pròpia variable `sum`.

.play moretypes/function-closures.go

* Exercici: Tancament de Fibonacci

Divertim-nos una mica amb les funcions.

Implementa una funció `fibonacci` que retorni una funció (un tancament) que
retorni successius [[https://en.wikipedia.org/wiki/Fibonacci_number][números de Fibonacci]]
(0, 1, 1, 2, 3, 5, ...).

.play moretypes/exercise-fibonacci-closure.go

* Enhorabona!

Has acabat aquesta lliçó!

Pots tornar a la llista de [[/list][mòduls]] per trobar què aprendre a continuació, o continuar amb la [[javascript:click('.next-page')][següent lliçó]].
