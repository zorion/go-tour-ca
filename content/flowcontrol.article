Instruccions d'estructura de control: for, if, else, switch i defer.
Aprèn com controlar el flux d'execució del teu codi amb condicionals, iteracions, seleccions i endarreriments.

The Go Authors
https://golang.org

* For

Go només té una instrucció per iterar, el bucle `for`.

El `for` bàsic té tres components separades per punt i coma:

- the init statement: executed before the first iteration
- the condition expression: evaluated before every iteration
- the post statement: executed at the end of every iteration

The init statement will often be a short variable declaration, and the
variables declared there are visible only in the scope of the `for`
statement.

The loop will stop iterating once the boolean condition evaluates to `false`.

*Nota:* A diferència d'altres llenguatges com C, Java o JavaScript no hi ha parèntesis
envoltant les tres components del `for` statement i els `{`}` són
obligatoris.

.play flowcontrol/for.go

* For (continuació)

Pots deixar les instruccions inicial i d'increment buides (són opcionals).

.play flowcontrol/for-continued.go

* For és el "while" de Go

Fent-ho així pots eliminar els punt i coma: El `while` de C s'escriu `for` a Go.

.play flowcontrol/for-is-gos-while.go

* Etern

Si no inclous la condició de bucle esdevé un bucle infinit de manera que un bucle infinit s'escriu de manera compacta.

.play flowcontrol/forever.go

* If

La instrucció `if` de Go és similar al seu a `for`,
els `(`)` desapareixen i els `{`}` són obligatoris.

.play flowcontrol/if.go

* If amb instrucció inicial

Com el `for` la instrucció `if` pot començar amb una instrucció inicial abans de la condició.

Les variables declarades en aquesta instrucció només són visibles a l'àmbit de la instrucció `if`.

(Intenta usar `v` a la última instrucció `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If i else

Les variables declarades dins d'una instrucció inicial d'un `if`
també són visibles a qualsevol dels seus blocs `else`.

(Les dues crides a `pow` acaben i retornen abans de que comenci la crida a `fmt.Prinln``
que hi ha al `main`)

.play flowcontrol/if-and-else.go

* Exercici: Bucles i Funcions

Una manera simple de practicar amb les funcions i els bucles és implementar l'arrel quadrada fent servir el mètode de Newton-Raphson.

En aquest cas, el mètode de Newton és aproximar `Sqrt(x)` escollint un punt inicial _z_ i iterant:

	z -= (z*z - x) / (2*z)

Per començar, repeteix el càlcul 10 vegades i mira com t'aproximes a la solució per a diferents valors (1, 2, 3, ...).

Després, pots canviar la condició de bucle per que s'aturi quan el càlcul no canvia més (o canvia un "delta" molt petit). Mira si són més o menys iteracions. Quant t'has aproximat al resultat de [[http://golang.org/pkg/math/#Sqrt][math.Sqrt]]?

Pista: per declarar i inicialitzar un valor decimal flotant, dóna-li un valor decimal o fes servir una conversió:

	z := float64(1)
	z := 1.0

*Nota:* guarda la teva funció que la farem servir més endavant.

*Aquesta era traducció antiga, la nova versió en anglès a continuació*

As a way to play with functions and loops, let's implement a square root function: given a number x, we want to find the number z for which z² is most nearly x.

Computers typically compute the square root of x using a loop.
Starting with some guess z, we can adjust z based on how close z² is to x,
producing a better guess:

	z -= (z*z - x) / (2*z)

Repeating this adjustment makes the guess better and better
until we reach an answer that is as close to the actual square root as can be.

Implement this in the `func`Sqrt` provided.
A decent starting guess for z is 1, no matter what the input.
To begin with, repeat the calculation 10 times and print each z along the way.
See how close you get to the answer for various values of x (1, 2, 3, ...)
and how quickly the guess improves.

Hint: To declare and initialize a floating point value,
give it floating point syntax or use a conversion:

	z := 1.0
	z := float64(1)

Next, change the loop condition to stop once the value has stopped
changing (or only changes by a very small amount).
See if that's more or fewer than 10 iterations.
Try other initial guesses for z, like x, or x/2.
How close are your function's results to the [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] in the standard library?

(*Note:* If you are interested in the details of the algorithm, the z² − x above
is how far away z² is from where it needs to be (x), and the division by 2z is the derivative
of z², to scale how much we adjust z by how quickly z² is changing.
This general approach is called [[https://en.wikipedia.org/wiki/Newton%27s_method][Newton's method]].
It works well for many functions but especially well for square root.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

A `switch` statement is a shorter way to write a sequence of `if`-`else` statements.
It runs the first case whose value is equal to the condition expression.

Go's switch is like the one in C, C++, Java, JavaScript, and PHP,
except that Go only runs the selected case, not all the cases that follow.
In effect, the `break` statement that is needed at the end of each case in those
languages is provided automatically in Go.
Another important difference is that Go's switch cases need not
be constants, and the values involved need not be integers.

.play flowcontrol/switch.go

* Switch evaluation order

Switch cases evaluate cases from top to bottom, stopping when a case succeeds.

(For example,

	switch i {
	case 0:
	case f():
	}

does not call `f` if `i==0`.)

#appengine: *Note:* Time in the Go playground always appears to start at
#appengine: 2009-11-10 23:00:00 UTC, a value whose significance is left as an
#appengine: exercise for the reader.

.play flowcontrol/switch-evaluation-order.go

* Switch with no condition

Switch without a condition is the same as `switch`true`.

This construct can be a clean way to write long if-then-else chains.

.play flowcontrol/switch-with-no-condition.go

* Defer

A defer statement defers the execution of a function until the surrounding
function returns.

The deferred call's arguments are evaluated immediately, but the function call
is not executed until the surrounding function returns.

.play flowcontrol/defer.go

* Stacking defers

Deferred function calls are pushed onto a stack. When a function returns, its
deferred calls are executed in last-in-first-out order.

To learn more about defer statements read this
[[https://blog.golang.org/defer-panic-and-recover][blog post]].

.play flowcontrol/defer-multi.go

* Enhorabona!

Has acabat aquesta lliçò!

Pots tornar al llistat de [[/list][mòduls]] per veure què més aprendre, o continuar amb la [[javascript:click('.next-page')][següent lliçò]].
