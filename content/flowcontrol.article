Instruccions d'estructura de control: for, if, else, switch i defer
Aprèn com controlar el flux d'execució del teu codi amb condicionals, iteracions, seleccions i endarreriments.

Els autors de Go
https://golang.org

* For

Go només té una instrucció per iterar, el bucle `for`.

El `for` bàsic té tres components separades per punt i coma:

- la instrucció d'inicialització: s'executa abans de la primera iteració
- l'expressió de condició: s'avalua abans de cada iteració
- la instrucció posterior: s'executa al final de cada iteració

La instrucció d'inicialització sovint serà una declaració curta de variable, i les
variables declarades allà només són visibles dins l'àmbit de la instrucció `for`.

El bucle deixarà d'iterar quan la condició booleana s'avaluï com a `false`.

*Nota:* A diferència d'altres llenguatges com C, Java o JavaScript no hi ha parèntesis
envoltant les tres components de la instrucció `for` i les claus `{`}` són
obligatòries.

.play flowcontrol/for.go

* For (continuació)

Pots deixar les instruccions inicial i d'increment buides (són opcionals).

.play flowcontrol/for-continued.go

* For és el "while" de Go

Fent-ho així pots eliminar els punt i coma: El `while` de C s'escriu `for` a Go.

.play flowcontrol/for-is-gos-while.go

* Etern

Si no inclous la condició de bucle esdevé un bucle infinit, de manera que un bucle infinit s'escriu de manera compacta.

.play flowcontrol/forever.go

* If

La instrucció `if` de Go és similar al seu `for`;
els parèntesis `(`)` desapareixen i les claus `{`}` són obligatòries.

.play flowcontrol/if.go

* If amb instrucció inicial

Com el `for`, la instrucció `if` pot començar amb una instrucció inicial abans de la condició.

Les variables declarades en aquesta instrucció només són visibles a l'àmbit de la instrucció `if`.

(Intenta usar `v` a l'última instrucció `return`.)

.play flowcontrol/if-with-a-short-statement.go

* If i else

Les variables declarades dins d'una instrucció inicial d'un `if`
també són visibles a qualsevol dels seus blocs `else`.

(Les dues crides a `pow` acaben i retornen abans que comenci la crida a `fmt.Println`
que hi ha al `main`.)

.play flowcontrol/if-and-else.go

* Exercici: Bucles i Funcions

Com a manera de practicar amb funcions i bucles, implementarem una funció d'arrel quadrada: donat un número x, volem trobar el número z pel qual z² s'aproxima més a x.

Els ordinadors típicament calculen l'arrel quadrada de x utilitzant un bucle.
Començant amb una suposició z, podem ajustar z basant-nos en com de proper és z² a x,
produint una millor suposició:

	z -= (z*z - x) / (2*z)

Repetir aquest ajustament fa que la suposició sigui cada vegada millor
fins que arribem a una resposta que és tan propera a l'arrel quadrada real com sigui possible.

Implementa això a la funció `Sqrt` proporcionada.
Una bona suposició inicial per z és 1, independentment de l'entrada.
Per començar, repeteix el càlcul 10 vegades i imprimeix cada z pel camí.
Observa com t'aproximes a la resposta per a diversos valors de x (1, 2, 3, ...)
i com de ràpidament millora la suposició.

Pista: Per declarar i inicialitzar un valor de coma flotant,
dona-li sintaxi de coma flotant o utilitza una conversió:

	z := 1.0
	z := float64(1)

A continuació, canvia la condició del bucle per aturar-se un cop el valor hagi deixat
de canviar (o només canviï per una quantitat molt petita).
Comprova si això requereix més o menys de 10 iteracions.
Prova altres suposicions inicials per z, com x, o x/2.
Com de propers són els resultats de la teva funció als de [[https://golang.org/pkg/math/#Sqrt][math.Sqrt]] de la biblioteca estàndard?

(*Nota:* Si t'interessen els detalls de l'algorisme, el z² − x anterior
és com de lluny està z² d'on necessita ser (x), i la divisió per 2z és la derivada
de z², per escalar quant ajustem z segons com de ràpidament canvia z².
Aquest enfocament general s'anomena [[https://en.wikipedia.org/wiki/Newton%27s_method][mètode de Newton]].
Funciona bé per a moltes funcions però especialment bé per a l'arrel quadrada.)

.play flowcontrol/exercise-loops-and-functions.go

* Switch

Una instrucció `switch` és una manera més curta d'escriure una seqüència d'instruccions `if`-`else`.
Executa el primer cas el valor del qual sigui igual a l'expressió de condició.

El switch de Go és com el de C, C++, Java, JavaScript i PHP,
excepte que Go només executa el cas seleccionat, no tots els casos que segueixen.
En efecte, la instrucció `break` que es necessita al final de cada cas en aquests
llenguatges es proporciona automàticament a Go.
Una altra diferència important és que els casos del switch de Go no necessiten
ser constants, i els valors involucrats no necessiten ser enters.

.play flowcontrol/switch.go

* Ordre d'avaluació del Switch

Els casos del switch s'avaluen de dalt a baix, aturant-se quan un cas té èxit.

(Per exemple,

	switch i {
	case 0:
	case f():
	}

no crida `f` si `i==0`.)

#appengine: *Nota:* El temps al playground de Go sempre sembla començar a
#appengine: 2009-11-10 23:00:00 UTC, un valor la importància del qual es deixa com a
#appengine: exercici per al lector.

.play flowcontrol/switch-evaluation-order.go

* Switch sense condició

Un switch sense condició és el mateix que `switch true`.

Aquesta construcció pot ser una manera neta d'escriure llargues cadenes if-then-else.

.play flowcontrol/switch-with-no-condition.go

* Defer

Una instrucció defer ajorna l'execució d'una funció fins que la funció que l'envolta
retorni.

Els arguments de la crida ajornada s'avaluen immediatament, però la crida a la funció
no s'executa fins que la funció que l'envolta retorni.

.play flowcontrol/defer.go

* Apilant defers

Les crides a funcions ajornades es posen en una pila. Quan una funció retorna, les seves
crides ajornades s'executen en ordre últim en entrar, primer en sortir.

Per aprendre més sobre les instruccions defer, llegeix aquesta
[[https://blog.golang.org/defer-panic-and-recover][entrada de blog]].

.play flowcontrol/defer-multi.go

* Enhorabona!

Has acabat aquesta lliçó!

Pots tornar al llistat de [[/list][mòduls]] per veure què més pots aprendre, o continuar amb la [[javascript:click('.next-page')][següent lliçó]].
