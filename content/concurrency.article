Concurrència
Go proporciona construccions de concurrència com a part del llenguatge base. Aquesta lliçó les presenta i dona alguns exemples de com es poden utilitzar.

Els Autors de Go
https://golang.org

* Goroutines

Una _goroutine_ és un fil lleuger gestionat pel runtime de Go.

	go f(x, y, z)

inicia una nova goroutine executant

	f(x, y, z)

L'avaluació de `f`, `x`, `y`, i `z` succeeix a la goroutine actual i l'execució de `f` succeeix a la nova goroutine.

Les goroutines s'executen en el mateix espai d'adreces, així que l'accés a la memòria compartida ha d'estar sincronitzat. El paquet [[https://golang.org/pkg/sync/][`sync`]] proporciona primitives útils, tot i que no les necessitaràs gaire en Go ja que hi ha altres primitives. (Mira la següent diapositiva.)

.play concurrency/goroutines.go

* Canals

Els canals són un conducte tipat a través del qual pots enviar i rebre valors amb l'operador de canal, `<-`.

	ch <- v    // Envia v al canal ch.
	v := <-ch  // Rep de ch, i
	           // assigna el valor a v.

(Les dades flueixen en la direcció de la fletxa.)

Com els maps i les llesques, els canals s'han de crear abans d'usar-los:

	ch := make(chan int)

Per defecte, els enviaments i les recepcions bloquegen fins que l'altra banda està preparada. Això permet que les goroutines es sincronitzin sense bloquejos explícits o variables de condició.

El codi d'exemple suma els números d'una llista, distribuint el treball entre dues goroutines.
Un cop ambdues goroutines han completat el seu càlcul, calcula el resultat final.

.play concurrency/channels.go

* Canals amb Buffer

Els canals poden tenir _buffer_. Proporciona la longitud del buffer com a segon argument a `make` per inicialitzar un canal amb buffer:

	ch := make(chan int, 100)

Els enviaments a un canal amb buffer només es bloquegen quan el buffer està ple. Les recepcions es bloquegen quan el buffer està buit.

Modifica l'exemple per omplir en excés el buffer i veure què passa.

.play concurrency/buffered-channels.go

* Range i Close

Un emissor pot `close` (tancar) un canal per indicar que no s'enviaran més valors. Els receptors poden provar si un canal s'ha tancat assignant un segon paràmetre a l'expressió de recepció: després de

	v, ok := <-ch

`ok` és `false` si no hi ha més valors per rebre i el canal està tancat.

El bucle `for`i`:=`range`c` rep valors del canal repetidament fins que es tanca.

*Nota:* Només l'emissor hauria de tancar un canal, mai el receptor. Enviar a un canal tancat causarà un pànic.

*Una*altra*nota:* Els canals no són com fitxers; normalment no cal tancar-los. El tancament només és necessari quan el receptor ha de saber que no vindran més valors, com per finalitzar un bucle `range`.

.play concurrency/range-and-close.go

* Select

La declaració `select` permet a una goroutine esperar múltiples operacions de comunicació.

Un `select` es bloqueja fins que un dels seus casos pot executar-se, llavors executa aquest cas. Si múltiples estan preparats, n'escull un a l'atzar.

.play concurrency/select.go

* Selecció per Defecte

El cas `default` en un `select` s'executa si cap altre cas està preparat.

Utilitza un cas `default` per provar un enviament o recepció sense bloquejar:

	select {
	case i := <-c:
		// utilitza i
	default:
		// rebre de c es bloquejaria
	}

.play concurrency/default-selection.go

* Exercici: Arbres Binaris Equivalents

Hi pot haver molts arbres binaris diferents amb la mateixa seqüència de valors emmagatzemats. Per exemple, aquí hi ha dos arbres binaris que emmagatzemen la seqüència 1, 1, 2, 3, 5, 8, 13.

.image /content/img/tree.png

Una funció per comprovar si dos arbres binaris emmagatzemen la mateixa seqüència és bastant complexa en la majoria de llenguatges. Utilitzarem la concurrència i els canals de Go per escriure una solució simple.

Aquest exemple utilitza el paquet `tree`, que defineix el tipus:

	type Tree struct {
		Left  *Tree
		Value int
		Right *Tree
	}

Continua la descripció a la [[javascript:click('.next-page')][següent pàgina]].

* Exercici: Arbres Binaris Equivalents

*1.* Implementa la funció `Walk`.

*2.* Prova la funció `Walk`.

La funció `tree.New(k)` construeix un arbre binari estructurat aleatòriament (però sempre ordenat) que conté els valors `k`, `2k`, `3k`, ..., `10k`.

Crea un nou canal `ch` i inicia el walker:

	go Walk(tree.New(1), ch)

Després llegeix i imprimeix 10 valors del canal. Haurien de ser els números 1, 2, 3, ..., 10.

*3.* Implementa la funció `Same` utilitzant `Walk` per determinar si `t1` i `t2` emmagatzemen els mateixos valors.

*4.* Prova la funció `Same`.

`Same(tree.New(1),`tree.New(1))` hauria de retornar true, i `Same(tree.New(1),`tree.New(2))` hauria de retornar false.

La documentació per `Tree` es pot trobar [[https://godoc.org/golang.org/x/tour/tree#Tree][aquí]].

.play concurrency/exercise-equivalent-binary-trees.go

* sync.Mutex

Hem vist com els canals són genials per a la comunicació entre goroutines.

Però què passa si no necessitem comunicació? Què passa si només volem assegurar-nos que només
una goroutine pot accedir a una variable alhora per evitar conflictes?

Aquest concepte s'anomena _exclusió_mútua_, i el nom convencional per a l'estructura de dades que la proporciona és _mutex_.

La biblioteca estàndard de Go proporciona exclusió mútua amb
[[https://golang.org/pkg/sync/#Mutex][`sync.Mutex`]] i els seus dos mètodes:

- `Lock`
- `Unlock`

Podem definir un bloc de codi per ser executat en exclusió mútua envoltant-lo
amb una crida a `Lock` i `Unlock` com es mostra al mètode `Inc`.

També podem utilitzar `defer` per assegurar que el mutex es desbloquejarà com al mètode `Value`.

.play concurrency/mutex-counter.go

* Exercici: Rastrejador Web

En aquest exercici utilitzaràs les característiques de concurrència de Go per paral·lelitzar un rastrejador web.

Modifica la funció `Crawl` per obtenir URLs en paral·lel sense obtenir la mateixa URL dues vegades.

_Pista_: pots mantenir una memòria cau de les URLs que s'han obtingut en un map, però els maps sols no són
segurs per a ús concurrent!

.play concurrency/exercise-web-crawler.go

* On anar des d'aquí...

#appengine: Pots començar
#appengine: [[https://golang.org/dl/][instal·lant Go]].

#appengine: Un cop tinguis Go instal·lat, la
La [[https://golang.org/doc/][Documentació de Go]] és un gran lloc per
#appengine: continuar.
començar.
Conté referències, tutorials, vídeos i més.

Per aprendre com organitzar i treballar amb codi Go, mira [[https://www.youtube.com/watch?v=XCsL89YtqCs][aquest screencast]] o llegeix [[https://golang.org/doc/code.html][Com Escriure Codi Go]].

Si necessites ajuda amb la biblioteca estàndard, consulta la [[https://golang.org/pkg/][referència de paquets]]. Per ajuda amb el llenguatge mateix, et podria sorprendre trobar que l'[[https://golang.org/ref/spec][Especificació del Llenguatge]] és bastant llegible.

Per explorar més el model de concurrència de Go, mira
[[https://www.youtube.com/watch?v=f6kdp27TYZs][Patrons de Concurrència en Go]]
([[https://talks.golang.org/2012/concurrency.slide][diapositives]])
i
[[https://www.youtube.com/watch?v=QDDwwePbDtw][Patrons Avançats de Concurrència en Go]]
([[https://talks.golang.org/2013/advconc.slide][diapositives]])
i llegeix el
[[https://golang.org/doc/codewalk/sharemem/][Compartir Memòria Comunicant]]
codewalk.

Per començar a escriure aplicacions web, mira
[[https://vimeo.com/53221558][Un entorn de programació simple]]
([[https://talks.golang.org/2012/simple.slide][diapositives]])
i llegeix el tutorial
[[https://golang.org/doc/articles/wiki/][Escrivint Aplicacions Web]].

El [[https://blog.golang.org/][Blog de Go]] té un gran arxiu d'articles informatius sobre Go.

Per aprofundir en les funcions de Go, llegeix el codewalk [[https://golang.org/doc/codewalk/functions/][Les Funcions com a Ciutadans de Primera Classe en Go]], que ofereix una perspectiva interessant sobre els tipus de funcions en Go.

Visita [[https://golang.org][golang.org]] per més informació.
